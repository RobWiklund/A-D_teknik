
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000002c0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e9c  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000961  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065b  00000000  00000000  00001c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048c  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000092b  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000316b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 ec       	ldi	r30, 0xC0	; 192
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 33       	cpi	r26, 0x34	; 52
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 18 01 	call	0x230	; 0x230 <main>
  a2:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <LCD_enable>:
	while (*lcd_string)
   	{  
	  LCD_putc(*lcd_string++);								// Character by character
	  waitForLCD();											// Wait until display is ready
   	}
}
  aa:	00 00       	nop
  ac:	82 b1       	in	r24, 0x02	; 2
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	82 b9       	out	0x02, r24	; 2
  b2:	00 00       	nop
  b4:	82 b1       	in	r24, 0x02	; 2
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	82 b9       	out	0x02, r24	; 2
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <LCD_command>:
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
  c2:	82 b1       	in	r24, 0x02	; 2
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	82 b9       	out	0x02, r24	; 2
  c8:	88 b1       	in	r24, 0x08	; 8
  ca:	9c 2f       	mov	r25, r28
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_enable>
  d8:	20 e1       	ldi	r18, 0x10	; 16
  da:	c2 9f       	mul	r28, r18
  dc:	c0 01       	movw	r24, r0
  de:	11 24       	eor	r1, r1
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	9f 70       	andi	r25, 0x0F	; 15
  e4:	89 2b       	or	r24, r25
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_enable>
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_command+0x32>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_command+0x38>
  f6:	00 00       	nop
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <LCD_putc>:
  fc:	cf 93       	push	r28
  fe:	c8 2f       	mov	r28, r24
 100:	84 3e       	cpi	r24, 0xE4	; 228
 102:	09 f4       	brne	.+2      	; 0x106 <LCD_putc+0xa>
 104:	c1 ee       	ldi	r28, 0xE1	; 225
 106:	c6 3f       	cpi	r28, 0xF6	; 246
 108:	09 f4       	brne	.+2      	; 0x10c <LCD_putc+0x10>
 10a:	cf ee       	ldi	r28, 0xEF	; 239
 10c:	82 b1       	in	r24, 0x02	; 2
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	82 b9       	out	0x02, r24	; 2
 112:	88 b1       	in	r24, 0x08	; 8
 114:	9c 2f       	mov	r25, r28
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	89 2b       	or	r24, r25
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_enable>
 122:	20 e1       	ldi	r18, 0x10	; 16
 124:	c2 9f       	mul	r28, r18
 126:	c0 01       	movw	r24, r0
 128:	11 24       	eor	r1, r1
 12a:	98 b1       	in	r25, 0x08	; 8
 12c:	9f 70       	andi	r25, 0x0F	; 15
 12e:	89 2b       	or	r24, r25
 130:	88 b9       	out	0x08, r24	; 8
 132:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_enable>
 136:	89 ef       	ldi	r24, 0xF9	; 249
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_putc+0x3e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_putc+0x44>
 140:	00 00       	nop
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <LCD_nibble>:
 146:	92 b1       	in	r25, 0x02	; 2
 148:	9f 7d       	andi	r25, 0xDF	; 223
 14a:	92 b9       	out	0x02, r25	; 2
 14c:	98 b1       	in	r25, 0x08	; 8
 14e:	80 7f       	andi	r24, 0xF0	; 240
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	89 2b       	or	r24, r25
 154:	88 b9       	out	0x08, r24	; 8
 156:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_enable>
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_nibble+0x18>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_nibble+0x1e>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <waitForLCD>:
 168:	82 b1       	in	r24, 0x02	; 2
 16a:	8f 7d       	andi	r24, 0xDF	; 223
 16c:	82 b9       	out	0x02, r24	; 2
 16e:	82 b1       	in	r24, 0x02	; 2
 170:	80 64       	ori	r24, 0x40	; 64
 172:	82 b9       	out	0x02, r24	; 2
 174:	87 b1       	in	r24, 0x07	; 7
 176:	8f 70       	andi	r24, 0x0F	; 15
 178:	87 b9       	out	0x07, r24	; 7
 17a:	87 b1       	in	r24, 0x07	; 7
 17c:	80 6f       	ori	r24, 0xF0	; 240
 17e:	87 b9       	out	0x07, r24	; 7
 180:	82 b1       	in	r24, 0x02	; 2
 182:	8f 7b       	andi	r24, 0xBF	; 191
 184:	82 b9       	out	0x02, r24	; 2
 186:	08 95       	ret

00000188 <LCD_init>:
	//	Intilializes the LCD
	//	4-bits interface
	//
	//****************************************************************************

   	LCD_CTRL_PORT &= ~(1<<LCD_rs);   		// Clear RS pin, defined in header file
 188:	82 b1       	in	r24, 0x02	; 2
 18a:	8f 7d       	andi	r24, 0xDF	; 223
 18c:	82 b9       	out	0x02, r24	; 2
   	LCD_CTRL_PORT &= ~(1<<LCD_rw);   		// Clear R/W pin, defined in header file
 18e:	82 b1       	in	r24, 0x02	; 2
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	82 b9       	out	0x02, r24	; 2
   	LCD_CTRL_PORT &= ~(1<<LCD_en);   		// Clear EN pin. defined in header file
 194:	82 b1       	in	r24, 0x02	; 2
 196:	8f 77       	andi	r24, 0x7F	; 127
 198:	82 b9       	out	0x02, r24	; 2
	
	LCD_CTRL_DDR |= (1<<LCD_rs);			// Set RS pin (output)
 19a:	81 b1       	in	r24, 0x01	; 1
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	81 b9       	out	0x01, r24	; 1
   	LCD_CTRL_DDR |= (1<<LCD_rw);			// Set R/W pin (output)
 1a0:	81 b1       	in	r24, 0x01	; 1
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	81 b9       	out	0x01, r24	; 1
   	LCD_CTRL_DDR |= (1<<LCD_en);			// Set EN pin (output)
 1a6:	81 b1       	in	r24, 0x01	; 1
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	81 b9       	out	0x01, r24	; 1

	LCD_DATA_DDR |= 0xF0;					// Set PC4 - PC7 to output
 1ac:	87 b1       	in	r24, 0x07	; 7
 1ae:	80 6f       	ori	r24, 0xF0	; 240
 1b0:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	87 ea       	ldi	r24, 0xA7	; 167
 1b4:	91 e6       	ldi	r25, 0x61	; 97
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_init+0x2e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_init+0x34>
 1bc:	00 00       	nop
    _delay_ms(100);      					// Delay after power up
	
	LCD_nibble(0x20);						// Select 4-bit mode
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_nibble>
 1c4:	87 e8       	ldi	r24, 0x87	; 135
 1c6:	93 e1       	ldi	r25, 0x13	; 19
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_init+0x40>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_init+0x46>
 1ce:	00 00       	nop
    _delay_ms(20);
	
	LCD_function_set();						// See header file for more detailed information
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_command>
 1d6:	83 ec       	ldi	r24, 0xC3	; 195
 1d8:	99 e0       	ldi	r25, 0x09	; 9
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_init+0x52>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_init+0x58>
 1e0:	00 00       	nop
   	_delay_ms(10);
	   	
	LCD_function_set();						// See header file for more detailed information
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_command>
   	waitForLCD();							// Wait until display is ready
 1e8:	0e 94 b4 00 	call	0x168	; 0x168 <waitForLCD>

	//LCD_display_off();					// See header file for more detailed information
	LCD_display_on();
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_command>
	waitForLCD();							// Wait until display is ready
 1f2:	0e 94 b4 00 	call	0x168	; 0x168 <waitForLCD>
   	
	LCD_display_clear();					// See header file for more detailed information
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_command>
	waitForLCD();							// Wait until display is ready
 1fc:	0e 94 b4 00 	call	0x168	; 0x168 <waitForLCD>
   	
	LCD_entry_mode_set();					// See header file for more detailed information
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_command>
	waitForLCD();							// Wait until display is ready
 206:	0e 94 b4 00 	call	0x168	; 0x168 <waitForLCD>
 20a:	83 ed       	ldi	r24, 0xD3	; 211
 20c:	90 e3       	ldi	r25, 0x30	; 48
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_init+0x86>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_init+0x8c>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <LCD_goto>:
	//
	//	Move the cursor to given position (rows are defined in header file)
	// 
	//*****************************************************************************
	
	LCD_CTRL_PORT &= ~(1<<LCD_rs);   	// Clear RS pin
 218:	92 b1       	in	r25, 0x02	; 2
 21a:	9f 7d       	andi	r25, 0xDF	; 223
 21c:	92 b9       	out	0x02, r25	; 2
   	LCD_CTRL_PORT &= ~(1<<LCD_rw);  	// Clear R/W pin
 21e:	92 b1       	in	r25, 0x02	; 2
 220:	9f 7b       	andi	r25, 0xBF	; 191
 222:	92 b9       	out	0x02, r25	; 2
	LCD_command(0x80+p);				// Move cursor to given position
 224:	80 58       	subi	r24, 0x80	; 128
 226:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_command>
	waitForLCD();						// Wait until display is ready
 22a:	0e 94 b4 00 	call	0x168	; 0x168 <waitForLCD>
 22e:	08 95       	ret

00000230 <main>:

void IOInit(void);		
void LeftShiftPins(void);				

int main (void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	e4 97       	sbiw	r28, 0x34	; 52
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61

    	LCD_init();			// Initialize the LCD
 244:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_init>
   	
		int DelayTime = 500;	// 500 ms
		int start = 31;
		short i;

		char outputText[] = "                    Hello World                    ";
 248:	84 e3       	ldi	r24, 0x34	; 52
 24a:	e0 e0       	ldi	r30, 0x00	; 0
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	de 01       	movw	r26, r28
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	8a 95       	dec	r24
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x22>
{

    	LCD_init();			// Initialize the LCD
   	
		int DelayTime = 500;	// 500 ms
		int start = 31;
 25a:	0f 2e       	mov	r0, r31
 25c:	ff e1       	ldi	r31, 0x1F	; 31
 25e:	ef 2e       	mov	r14, r31
 260:	f1 2c       	mov	r15, r1
 262:	f0 2d       	mov	r31, r0
 264:	05 c0       	rjmp	.+10     	; 0x270 <main+0x40>
			_delay_ms(DelayTime);
			LCD_goto(0);
			start--;
			
			if (start == 0)
			start = 31;
 266:	0f 2e       	mov	r0, r31
 268:	ff e1       	ldi	r31, 0x1F	; 31
 26a:	ef 2e       	mov	r14, r31
 26c:	f1 2c       	mov	r15, r1
 26e:	f0 2d       	mov	r31, r0
		char outputText[] = "                    Hello World                    ";


		while (1) {

			for (i=0; i<20; i++){
 270:	00 e0       	ldi	r16, 0x00	; 0
 272:	10 e0       	ldi	r17, 0x00	; 0
 274:	0e c0       	rjmp	.+28     	; 0x292 <main+0x62>
				LCD_putc(outputText[start+i]);	// Print a string on the LCD
 276:	f7 01       	movw	r30, r14
 278:	e0 0f       	add	r30, r16
 27a:	f1 1f       	adc	r31, r17
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	8c 0f       	add	r24, r28
 282:	9d 1f       	adc	r25, r29
 284:	e8 0f       	add	r30, r24
 286:	f9 1f       	adc	r31, r25
 288:	80 81       	ld	r24, Z
 28a:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_putc>
		char outputText[] = "                    Hello World                    ";


		while (1) {

			for (i=0; i<20; i++){
 28e:	0f 5f       	subi	r16, 0xFF	; 255
 290:	1f 4f       	sbci	r17, 0xFF	; 255
 292:	04 31       	cpi	r16, 0x14	; 20
 294:	11 05       	cpc	r17, r1
 296:	7c f3       	brlt	.-34     	; 0x276 <main+0x46>
 298:	9f e7       	ldi	r25, 0x7F	; 127
 29a:	24 e8       	ldi	r18, 0x84	; 132
 29c:	8e e1       	ldi	r24, 0x1E	; 30
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	20 40       	sbci	r18, 0x00	; 0
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x6e>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x78>
 2a8:	00 00       	nop
				LCD_putc(outputText[start+i]);	// Print a string on the LCD
			}

			_delay_ms(DelayTime);
			LCD_goto(0);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_goto>
			start--;
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	e9 1a       	sub	r14, r25
 2b6:	f1 08       	sbc	r15, r1
			
			if (start == 0)
 2b8:	b1 f2       	breq	.-84     	; 0x266 <main+0x36>
 2ba:	da cf       	rjmp	.-76     	; 0x270 <main+0x40>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
